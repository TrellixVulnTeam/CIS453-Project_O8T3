{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ian\\\\Desktop\\\\ECPI CIS\\\\CIS453\\\\Week 1\\\\Lab\\\\gute-main\\\\main\\\\source\\\\src\\\\components\\\\other\\\\customed-checkbox.tsx\";\nimport { renderThemeClass } from '@common/functions';\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n\nconst CustomedCheckbox = ({\n  label,\n  value,\n  shape = 'round',\n  defaultValue,\n  className,\n  theme,\n  onChange\n}) => {\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(defaultValue);\n  useEffect(() => {\n    setChecked(value);\n  }, [value]);\n  const r = Math.random().toString(36).substring(7);\n\n  const renderShape = () => '-' + shape;\n\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: 'checkbox-' + r,\n    className: classNames('checkbox-group customed', renderShape(), renderThemeClass(theme), className),\n    children: [label, /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: () => {\n        if (!value) {\n          setChecked(!checked);\n        }\n\n        onChange === null || onChange === void 0 ? void 0 : onChange(!checked);\n      },\n      type: \"checkbox\",\n      id: 'checkbox-' + r,\n      checked: checked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"checkmark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CustomedCheckbox;","map":{"version":3,"sources":["C:/Users/Ian/Desktop/ECPI CIS/CIS453/Week 1/Lab/gute-main/main/source/src/components/other/customed-checkbox.tsx"],"names":["renderThemeClass","classNames","React","useEffect","useState","CustomedCheckbox","label","value","shape","defaultValue","className","theme","onChange","checked","setChecked","r","Math","random","toString","substring","renderShape"],"mappings":";;AACA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAYA,MAAMC,gBAAgB,GAAG,CAAC;AACxBC,EAAAA,KADwB;AAExBC,EAAAA,KAFwB;AAGxBC,EAAAA,KAAK,GAAG,OAHgB;AAIxBC,EAAAA,YAJwB;AAKxBC,EAAAA,SALwB;AAMxBC,EAAAA,KANwB;AAOxBC,EAAAA;AAPwB,CAAD,KAQI;AAC3B,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,CAACK,YAAD,CAAtC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,UAAU,CAACP,KAAD,CAAV;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,QAAMQ,CAAC,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,CAAV;;AAEA,QAAMC,WAAW,GAAG,MAAM,MAAMZ,KAAhC;;AAEA,sBACE;AACE,IAAA,OAAO,EAAE,cAAcO,CADzB;AAEE,IAAA,SAAS,EAAEd,UAAU,CAAC,yBAAD,EAA4BmB,WAAW,EAAvC,EAA2CpB,gBAAgB,CAACW,KAAD,CAA3D,EAAoED,SAApE,CAFvB;AAAA,eAGGJ,KAHH,eAIE;AACE,MAAA,QAAQ,EAAE,MAAM;AACd,YAAI,CAACC,KAAL,EAAY;AACVO,UAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD;;AACDD,QAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAG,CAACC,OAAJ,CAAR;AACD,OANH;AAOE,MAAA,IAAI,EAAC,UAPP;AAQE,MAAA,EAAE,EAAE,cAAcE,CARpB;AASE,MAAA,OAAO,EAAEF;AATX;AAAA;AAAA;AAAA;AAAA,YAJF,eAeE;AAAM,MAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAtCD;;AAwCA,eAAeR,gBAAf","sourcesContent":["import { ThemeVariation } from '@common/enum';\nimport { renderThemeClass } from '@common/functions';\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n\ninterface CustomedCheckboxProps {\n  label: string;\n  defaultValue?: boolean;\n  value?: boolean;\n  className?: string;\n  theme?: ThemeVariation;\n  shape?: 'round' | 'circle';\n  onChange?: (p: boolean) => void;\n}\n\nconst CustomedCheckbox = ({\n  label,\n  value,\n  shape = 'round',\n  defaultValue,\n  className,\n  theme,\n  onChange,\n}: CustomedCheckboxProps) => {\n  const [checked, setChecked] = useState(defaultValue);\n\n  useEffect(() => {\n    setChecked(value);\n  }, [value]);\n\n  const r = Math.random().toString(36).substring(7);\n\n  const renderShape = () => '-' + shape;\n\n  return (\n    <label\n      htmlFor={'checkbox-' + r}\n      className={classNames('checkbox-group customed', renderShape(), renderThemeClass(theme), className)}>\n      {label}\n      <input\n        onChange={() => {\n          if (!value) {\n            setChecked(!checked);\n          }\n          onChange?.(!checked);\n        }}\n        type=\"checkbox\"\n        id={'checkbox-' + r}\n        checked={checked}\n      />\n      <span className=\"checkmark\" />\n    </label>\n  );\n};\n\nexport default CustomedCheckbox;\n"]},"metadata":{},"sourceType":"module"}