{"ast":null,"code":"import { getProductDetail, getProducts } from '@services/products';\nimport { productActions } from '@store/slices/products';\nimport { getProductCategory } from '@services/products';\nexport const handleGetProducts = param => async dispatch => {\n  try {\n    dispatch(productActions.getProductsRequest(param));\n    const data = await getProducts(param);\n    dispatch(productActions.getProductsSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getProductsFailed(error.message));\n  }\n};\nexport const handleGetRelatedProducts = param => async dispatch => {\n  try {\n    dispatch(productActions.getRelatedProductsRequest());\n    const data = await getProducts(param);\n    dispatch(productActions.getRelatedProductsSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getRelatedProductsFailed(error.message));\n  }\n};\nexport const handleGetProductCategories = param => async dispatch => {\n  try {\n    dispatch(productActions.getProductCategoriesRequest());\n    const data = await getProductCategory(param);\n    dispatch(productActions.getProductCategoriesSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getProductCategoriesFailed(error.message));\n  }\n};\nexport const handleGetProductDetail = id => async dispatch => {\n  try {\n    dispatch(productActions.getProductDetailRequest());\n    const {\n      data\n    } = await getProductDetail(id);\n    dispatch(productActions.getProductDetailSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getProductDetailFailed(error.message));\n  }\n};","map":{"version":3,"sources":["C:/Users/Ian/Desktop/ECPI CIS/CIS453/Week 1/Lab/CIS453 React Lab/main/source/src/store/thunk/products.ts"],"names":["getProductDetail","getProducts","productActions","getProductCategory","handleGetProducts","param","dispatch","getProductsRequest","data","getProductsSuccess","error","getProductsFailed","message","handleGetRelatedProducts","getRelatedProductsRequest","getRelatedProductsSuccess","getRelatedProductsFailed","handleGetProductCategories","getProductCategoriesRequest","getProductCategoriesSuccess","getProductCategoriesFailed","handleGetProductDetail","id","getProductDetailRequest","getProductDetailSuccess","getProductDetailFailed"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,oBAA9C;AAEA,SAAgCC,cAAhC,QAAsD,wBAAtD;AAEA,SAASC,kBAAT,QAAmC,oBAAnC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,KAAD,IAAkC,MAAOC,QAAP,IAA8B;AAC/F,MAAI;AACFA,IAAAA,QAAQ,CAACJ,cAAc,CAACK,kBAAf,CAAkCF,KAAlC,CAAD,CAAR;AACA,UAAMG,IAAI,GAAG,MAAMP,WAAW,CAACI,KAAD,CAA9B;AACAC,IAAAA,QAAQ,CAACJ,cAAc,CAACO,kBAAf,CAAkCD,IAAlC,CAAD,CAAR;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAACJ,cAAc,CAACS,iBAAf,CAAiCD,KAAK,CAACE,OAAvC,CAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMC,wBAAwB,GAAIR,KAAD,IAAkC,MAAOC,QAAP,IAA8B;AACtG,MAAI;AACFA,IAAAA,QAAQ,CAACJ,cAAc,CAACY,yBAAf,EAAD,CAAR;AACA,UAAMN,IAAI,GAAG,MAAMP,WAAW,CAACI,KAAD,CAA9B;AACAC,IAAAA,QAAQ,CAACJ,cAAc,CAACa,yBAAf,CAAyCP,IAAzC,CAAD,CAAR;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAACJ,cAAc,CAACc,wBAAf,CAAwCN,KAAK,CAACE,OAA9C,CAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMK,0BAA0B,GAAIZ,KAAD,IAAyB,MAAOC,QAAP,IAA8B;AAC/F,MAAI;AACFA,IAAAA,QAAQ,CAACJ,cAAc,CAACgB,2BAAf,EAAD,CAAR;AACA,UAAMV,IAAI,GAAG,MAAML,kBAAkB,CAACE,KAAD,CAArC;AACAC,IAAAA,QAAQ,CAACJ,cAAc,CAACiB,2BAAf,CAA2CX,IAA3C,CAAD,CAAR;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAACJ,cAAc,CAACkB,0BAAf,CAA0CV,KAAK,CAACE,OAAhD,CAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMS,sBAAsB,GAAIC,EAAD,IAAgB,MAAOhB,QAAP,IAA8B;AAClF,MAAI;AACFA,IAAAA,QAAQ,CAACJ,cAAc,CAACqB,uBAAf,EAAD,CAAR;AACA,UAAM;AAAEf,MAAAA;AAAF,QAAW,MAAMR,gBAAgB,CAACsB,EAAD,CAAvC;AACAhB,IAAAA,QAAQ,CAACJ,cAAc,CAACsB,uBAAf,CAAuChB,IAAvC,CAAD,CAAR;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAACJ,cAAc,CAACuB,sBAAf,CAAsCf,KAAK,CAACE,OAA5C,CAAD,CAAR;AACD;AACF,CARM","sourcesContent":["import { getProductDetail, getProducts } from '@services/products';\nimport { QueryParams } from '@store/shared';\nimport { GetProductsListParams, productActions } from '@store/slices/products';\nimport { Dispatch } from 'redux';\nimport { getProductCategory } from '@services/products';\n\nexport const handleGetProducts = (param: GetProductsListParams) => async (dispatch: Dispatch) => {\n  try {\n    dispatch(productActions.getProductsRequest(param));\n    const data = await getProducts(param);\n    dispatch(productActions.getProductsSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getProductsFailed(error.message));\n  }\n};\n\nexport const handleGetRelatedProducts = (param: GetProductsListParams) => async (dispatch: Dispatch) => {\n  try {\n    dispatch(productActions.getRelatedProductsRequest());\n    const data = await getProducts(param);\n    dispatch(productActions.getRelatedProductsSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getRelatedProductsFailed(error.message));\n  }\n};\n\nexport const handleGetProductCategories = (param?: QueryParams) => async (dispatch: Dispatch) => {\n  try {\n    dispatch(productActions.getProductCategoriesRequest());\n    const data = await getProductCategory(param);\n    dispatch(productActions.getProductCategoriesSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getProductCategoriesFailed(error.message));\n  }\n};\n\nexport const handleGetProductDetail = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch(productActions.getProductDetailRequest());\n    const { data } = await getProductDetail(id);\n    dispatch(productActions.getProductDetailSuccess(data));\n  } catch (error) {\n    dispatch(productActions.getProductDetailFailed(error.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}