{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  toast: {\n    visible: false,\n    message: 'Some message'\n  }\n};\n\nvar showToast = function showToast(state, _ref) {\n  var payload = _ref.payload;\n  state.toast.visible = true;\n  state.toast.message = payload.message;\n  state.toast.type = payload.type;\n};\n\nvar hideToast = function hideToast(state, action) {\n  state.toast.visible = false;\n};\n\nvar commonSlice = createSlice({\n  name: 'common',\n  initialState: initialState,\n  reducers: {\n    showToast: showToast,\n    hideToast: hideToast\n  }\n});\nexport var commonActions = commonSlice.actions;\nexport var commonReducer = commonSlice.reducer;","map":{"version":3,"sources":["C:/Users/Ian/Desktop/ECPI CIS/CIS453/Week 1/Lab/CIS435 React Lab/main/source/src/store/slices/common.ts"],"names":["createSlice","initialState","toast","visible","message","showToast","state","payload","type","hideToast","action","commonSlice","name","reducers","commonActions","actions","commonReducer","reducer"],"mappings":"AAAA,SAAsBA,WAAtB,QAAwD,kBAAxD;AAYA,IAAMC,YAAyB,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,OAAO,EAAE,KAAX;AAAkBC,IAAAA,OAAO,EAAE;AAA3B;AAAT,CAAlC;;AAEA,IAAMC,SAA+E,GAAG,SAAlFA,SAAkF,CAACC,KAAD,QAAwB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC9GD,EAAAA,KAAK,CAACJ,KAAN,CAAYC,OAAZ,GAAsB,IAAtB;AACAG,EAAAA,KAAK,CAACJ,KAAN,CAAYE,OAAZ,GAAsBG,OAAO,CAACH,OAA9B;AACAE,EAAAA,KAAK,CAACJ,KAAN,CAAYM,IAAZ,GAAmBD,OAAO,CAACC,IAA3B;AACD,CAJD;;AAMA,IAAMC,SAAmC,GAAG,SAAtCA,SAAsC,CAACH,KAAD,EAAQI,MAAR,EAAmB;AAC7DJ,EAAAA,KAAK,CAACJ,KAAN,CAAYC,OAAZ,GAAsB,KAAtB;AACD,CAFD;;AAIA,IAAMQ,WAAW,GAAGX,WAAW,CAAC;AAC9BY,EAAAA,IAAI,EAAE,QADwB;AAE9BX,EAAAA,YAAY,EAAZA,YAF8B;AAG9BY,EAAAA,QAAQ,EAAE;AACRR,IAAAA,SAAS,EAATA,SADQ;AAERI,IAAAA,SAAS,EAATA;AAFQ;AAHoB,CAAD,CAA/B;AASA,OAAO,IAAMK,aAAa,GAAGH,WAAW,CAACI,OAAlC;AACP,OAAO,IAAMC,aAAa,GAAGL,WAAW,CAACM,OAAlC","sourcesContent":["import { CaseReducer, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface ToastState {\n  visible: boolean;\n  message: string;\n  type?: 'success' | 'error' | 'warn' | 'info';\n}\n\ninterface CommonState {\n  toast: ToastState;\n}\n\nconst initialState: CommonState = { toast: { visible: false, message: 'Some message' } };\n\nconst showToast: CaseReducer<CommonState, PayloadAction<Omit<ToastState, 'visible'>>> = (state, { payload }) => {\n  state.toast.visible = true;\n  state.toast.message = payload.message;\n  state.toast.type = payload.type;\n};\n\nconst hideToast: CaseReducer<CommonState> = (state, action) => {\n  state.toast.visible = false;\n};\n\nconst commonSlice = createSlice({\n  name: 'common',\n  initialState,\n  reducers: {\n    showToast,\n    hideToast,\n  },\n});\n\nexport const commonActions = commonSlice.actions;\nexport const commonReducer = commonSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}