{"ast":null,"code":"import { getAuthorDetail } from '@services/author';\nimport { getPosts } from '@services/post';\nimport { authorActions } from '@store/slices/author';\nexport const handleGetAuthorDetail = id => async dispatch => {\n  try {\n    dispatch(authorActions.getAuthorDetailRequest());\n    const {\n      data\n    } = await getAuthorDetail(id);\n    dispatch(authorActions.getAuthorDetailSuccess(data));\n  } catch (error) {\n    dispatch(authorActions.getAuthorDetailFailed(error.message));\n  }\n};\nexport const handleGetAuthorPosts = params => async dispatch => {\n  try {\n    dispatch(authorActions.getAuthorPostsRequest());\n    const data = await getPosts({\n      'user.id': params.id\n    });\n    dispatch(authorActions.getAuthorPostsSuccess(data));\n  } catch (error) {\n    dispatch(authorActions.getAuthorPostsFailed(error.message));\n  }\n};","map":{"version":3,"sources":["C:/Users/Ian/Desktop/ECPI CIS/CIS453/Week 1/Lab/gute-main/main/source/src/store/thunk/author.ts"],"names":["getAuthorDetail","getPosts","authorActions","handleGetAuthorDetail","id","dispatch","getAuthorDetailRequest","data","getAuthorDetailSuccess","error","getAuthorDetailFailed","message","handleGetAuthorPosts","params","getAuthorPostsRequest","getAuthorPostsSuccess","getAuthorPostsFailed"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AASA,OAAO,MAAMC,qBAAqB,GAAIC,EAAD,IAAgB,MAAOC,QAAP,IAA8B;AACjF,MAAI;AACFA,IAAAA,QAAQ,CAACH,aAAa,CAACI,sBAAd,EAAD,CAAR;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,eAAe,CAACI,EAAD,CAAtC;AACAC,IAAAA,QAAQ,CAACH,aAAa,CAACM,sBAAd,CAAqCD,IAArC,CAAD,CAAR;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAACH,aAAa,CAACQ,qBAAd,CAAoCD,KAAK,CAACE,OAA1C,CAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMC,oBAAoB,GAAIC,MAAD,IAAiC,MAAOR,QAAP,IAA8B;AACjG,MAAI;AACFA,IAAAA,QAAQ,CAACH,aAAa,CAACY,qBAAd,EAAD,CAAR;AACA,UAAMP,IAAI,GAAG,MAAMN,QAAQ,CAAC;AAAE,iBAAWY,MAAM,CAACT;AAApB,KAAD,CAA3B;AACAC,IAAAA,QAAQ,CAACH,aAAa,CAACa,qBAAd,CAAoCR,IAApC,CAAD,CAAR;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAACH,aAAa,CAACc,oBAAd,CAAmCP,KAAK,CAACE,OAAzC,CAAD,CAAR;AACD;AACF,CARM","sourcesContent":["import { getAuthorDetail } from '@services/author';\nimport { getPosts } from '@services/post';\nimport { authorActions } from '@store/slices/author';\nimport { GetPostListParams } from '@store/slices/posts';\nimport { Dispatch } from 'redux';\n\ninterface GetAuthorPostParams extends GetPostListParams {\n  id: number;\n  'user.id'?: number;\n}\n\nexport const handleGetAuthorDetail = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch(authorActions.getAuthorDetailRequest());\n    const { data } = await getAuthorDetail(id);\n    dispatch(authorActions.getAuthorDetailSuccess(data));\n  } catch (error) {\n    dispatch(authorActions.getAuthorDetailFailed(error.message));\n  }\n};\n\nexport const handleGetAuthorPosts = (params: GetAuthorPostParams) => async (dispatch: Dispatch) => {\n  try {\n    dispatch(authorActions.getAuthorPostsRequest());\n    const data = await getPosts({ 'user.id': params.id } as GetAuthorPostParams);\n    dispatch(authorActions.getAuthorPostsSuccess(data));\n  } catch (error) {\n    dispatch(authorActions.getAuthorPostsFailed(error.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}