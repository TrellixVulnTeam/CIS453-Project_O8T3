{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  detail: {\n    fetching: false\n  },\n  posts: {\n    fetching: false,\n    data: []\n  }\n};\n\nvar getAuthorDetailRequest = function getAuthorDetailRequest(state) {\n  delete state.detail.error;\n  state.detail.fetching = true;\n};\n\nvar getAuthorDetailSuccess = function getAuthorDetailSuccess(state, _ref) {\n  var payload = _ref.payload;\n  state.detail.data = payload;\n  state.detail.fetching = false;\n};\n\nvar getAuthorDetailFailed = function getAuthorDetailFailed(state, _ref2) {\n  var payload = _ref2.payload;\n  state.detail.error = payload;\n  state.detail.fetching = false;\n};\n\nvar getAuthorPostsRequest = function getAuthorPostsRequest(state) {\n  delete state.posts.error;\n  state.posts.fetching = true;\n};\n\nvar getAuthorPostsSuccess = function getAuthorPostsSuccess(state, _ref3) {\n  var payload = _ref3.payload;\n  state.posts.data = payload.data;\n  state.posts.meta = payload.meta;\n  state.posts.fetching = false;\n};\n\nvar getAuthorPostsFailed = function getAuthorPostsFailed(state, _ref4) {\n  var payload = _ref4.payload;\n  state.posts.error = payload;\n  state.posts.fetching = false;\n};\n\nvar authorSlice = createSlice({\n  name: 'author',\n  initialState: initialState,\n  reducers: {\n    getAuthorDetailRequest: getAuthorDetailRequest,\n    getAuthorDetailSuccess: getAuthorDetailSuccess,\n    getAuthorDetailFailed: getAuthorDetailFailed,\n    getAuthorPostsRequest: getAuthorPostsRequest,\n    getAuthorPostsSuccess: getAuthorPostsSuccess,\n    getAuthorPostsFailed: getAuthorPostsFailed\n  }\n});\nexport var authorActions = authorSlice.actions;\nexport var authorReducer = authorSlice.reducer;","map":{"version":3,"sources":["C:/Users/Ian/Desktop/ECPI CIS/CIS453/Week 1/Lab/CIS453 React Lab/main/source/src/store/slices/author.ts"],"names":["createSlice","initialState","detail","fetching","posts","data","getAuthorDetailRequest","state","error","getAuthorDetailSuccess","payload","getAuthorDetailFailed","getAuthorPostsRequest","getAuthorPostsSuccess","meta","getAuthorPostsFailed","authorSlice","name","reducers","authorActions","actions","authorReducer","reducer"],"mappings":"AAAA,SAAsBA,WAAtB,QAAwD,kBAAxD;AAmBA,IAAMC,YAAyB,GAAG;AAChCC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GADwB;AAEhCC,EAAAA,KAAK,EAAE;AAAED,IAAAA,QAAQ,EAAE,KAAZ;AAAmBE,IAAAA,IAAI,EAAE;AAAzB;AAFyB,CAAlC;;AAKA,IAAMC,sBAAgD,GAAG,SAAnDA,sBAAmD,CAACC,KAAD,EAAW;AAClE,SAAOA,KAAK,CAACL,MAAN,CAAaM,KAApB;AACAD,EAAAA,KAAK,CAACL,MAAN,CAAaC,QAAb,GAAwB,IAAxB;AACD,CAHD;;AAKA,IAAMM,sBAA2E,GAAG,SAA9EA,sBAA8E,CAACF,KAAD,QAAwB;AAAA,MAAdG,OAAc,QAAdA,OAAc;AAC1GH,EAAAA,KAAK,CAACL,MAAN,CAAaG,IAAb,GAAoBK,OAApB;AACAH,EAAAA,KAAK,CAACL,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD,CAHD;;AAKA,IAAMQ,qBAAsE,GAAG,SAAzEA,qBAAyE,CAACJ,KAAD,SAAwB;AAAA,MAAdG,OAAc,SAAdA,OAAc;AACrGH,EAAAA,KAAK,CAACL,MAAN,CAAaM,KAAb,GAAqBE,OAArB;AACAH,EAAAA,KAAK,CAACL,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD,CAHD;;AAKA,IAAMS,qBAA+C,GAAG,SAAlDA,qBAAkD,CAACL,KAAD,EAAW;AACjE,SAAOA,KAAK,CAACH,KAAN,CAAYI,KAAnB;AACAD,EAAAA,KAAK,CAACH,KAAN,CAAYD,QAAZ,GAAuB,IAAvB;AACD,CAHD;;AAKA,IAAMU,qBAAuF,GAAG,SAA1FA,qBAA0F,CAC9FN,KAD8F,SAG3F;AAAA,MADDG,OACC,SADDA,OACC;AACHH,EAAAA,KAAK,CAACH,KAAN,CAAYC,IAAZ,GAAmBK,OAAO,CAACL,IAA3B;AACAE,EAAAA,KAAK,CAACH,KAAN,CAAYU,IAAZ,GAAmBJ,OAAO,CAACI,IAA3B;AACAP,EAAAA,KAAK,CAACH,KAAN,CAAYD,QAAZ,GAAuB,KAAvB;AACD,CAPD;;AASA,IAAMY,oBAAqE,GAAG,SAAxEA,oBAAwE,CAACR,KAAD,SAAwB;AAAA,MAAdG,OAAc,SAAdA,OAAc;AACpGH,EAAAA,KAAK,CAACH,KAAN,CAAYI,KAAZ,GAAoBE,OAApB;AACAH,EAAAA,KAAK,CAACH,KAAN,CAAYD,QAAZ,GAAuB,KAAvB;AACD,CAHD;;AAKA,IAAMa,WAAW,GAAGhB,WAAW,CAAC;AAC9BiB,EAAAA,IAAI,EAAE,QADwB;AAE9BhB,EAAAA,YAAY,EAAZA,YAF8B;AAG9BiB,EAAAA,QAAQ,EAAE;AACRZ,IAAAA,sBAAsB,EAAtBA,sBADQ;AAERG,IAAAA,sBAAsB,EAAtBA,sBAFQ;AAGRE,IAAAA,qBAAqB,EAArBA,qBAHQ;AAKRC,IAAAA,qBAAqB,EAArBA,qBALQ;AAMRC,IAAAA,qBAAqB,EAArBA,qBANQ;AAORE,IAAAA,oBAAoB,EAApBA;AAPQ;AAHoB,CAAD,CAA/B;AAcA,OAAO,IAAMI,aAAa,GAAGH,WAAW,CAACI,OAAlC;AACP,OAAO,IAAMC,aAAa,GAAGL,WAAW,CAACM,OAAlC","sourcesContent":["import { CaseReducer, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ResponseState, ResponseStateDetail } from '@store/shared';\nimport { PostItem } from './posts';\n\nexport interface AuthorItem {\n  id: number;\n  avatar?: string;\n  fullName: string;\n  nickName?: string;\n  email: string;\n  gender: 'Non-binary';\n  bio?: 'streamline best-of-breed e-markets';\n}\n\ninterface AuthorState {\n  detail: ResponseStateDetail<AuthorItem>;\n  posts: ResponseState<PostItem>;\n}\n\nconst initialState: AuthorState = {\n  detail: { fetching: false },\n  posts: { fetching: false, data: [] },\n};\n\nconst getAuthorDetailRequest: CaseReducer<AuthorState> = (state) => {\n  delete state.detail.error;\n  state.detail.fetching = true;\n};\n\nconst getAuthorDetailSuccess: CaseReducer<AuthorState, PayloadAction<AuthorItem>> = (state, { payload }) => {\n  state.detail.data = payload;\n  state.detail.fetching = false;\n};\n\nconst getAuthorDetailFailed: CaseReducer<AuthorState, PayloadAction<string>> = (state, { payload }) => {\n  state.detail.error = payload;\n  state.detail.fetching = false;\n};\n\nconst getAuthorPostsRequest: CaseReducer<AuthorState> = (state) => {\n  delete state.posts.error;\n  state.posts.fetching = true;\n};\n\nconst getAuthorPostsSuccess: CaseReducer<AuthorState, PayloadAction<ResponseState<PostItem>>> = (\n  state,\n  { payload },\n) => {\n  state.posts.data = payload.data;\n  state.posts.meta = payload.meta;\n  state.posts.fetching = false;\n};\n\nconst getAuthorPostsFailed: CaseReducer<AuthorState, PayloadAction<string>> = (state, { payload }) => {\n  state.posts.error = payload;\n  state.posts.fetching = false;\n};\n\nconst authorSlice = createSlice({\n  name: 'author',\n  initialState,\n  reducers: {\n    getAuthorDetailRequest,\n    getAuthorDetailSuccess,\n    getAuthorDetailFailed,\n\n    getAuthorPostsRequest,\n    getAuthorPostsSuccess,\n    getAuthorPostsFailed,\n  },\n});\n\nexport const authorActions = authorSlice.actions;\nexport const authorReducer = authorSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}