{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { RequestStatus } from '@store/shared';\nconst initialState = {\n  list: {\n    fetching: false,\n    data: []\n  },\n  addToCart: {\n    status: RequestStatus.Idle\n  },\n  removeFromCart: {\n    status: RequestStatus.Idle\n  },\n  updateCartQuantity: {\n    status: RequestStatus.Idle\n  }\n};\n\nconst getCartRequest = state => {\n  delete state.list.error;\n  state.list.fetching = true;\n};\n\nconst getCartSuccess = (state, {\n  payload\n}) => {\n  state.list.data = payload.data;\n  state.list.fetching = false;\n};\n\nconst getCartFailed = (state, {\n  payload\n}) => {\n  state.list.error = payload;\n  state.list.fetching = false;\n};\n\nconst addToCartRequest = state => {\n  delete state.addToCart.error;\n  state.addToCart.status = RequestStatus.Loading;\n};\n\nconst addToCartSuccess = state => {\n  state.addToCart.status = RequestStatus.Success;\n};\n\nconst addToCartFailed = (state, {\n  payload\n}) => {\n  state.addToCart.error = payload;\n  state.addToCart.status = RequestStatus.Failed;\n};\n\nconst removeFromCartRequest = state => {\n  delete state.removeFromCart.error;\n  state.removeFromCart.status = RequestStatus.Loading;\n};\n\nconst removeFromCartSuccess = state => {\n  state.removeFromCart.status = RequestStatus.Success;\n};\n\nconst removeFromCartFailed = (state, {\n  payload\n}) => {\n  state.removeFromCart.error = payload;\n  state.removeFromCart.status = RequestStatus.Failed;\n};\n\nconst updateCartQuantityRequest = state => {\n  delete state.updateCartQuantity.error;\n  state.updateCartQuantity.status = RequestStatus.Loading;\n};\n\nconst updateCartQuantitySuccess = state => {\n  state.updateCartQuantity.status = RequestStatus.Success;\n};\n\nconst updateCartQuantityFailed = (state, {\n  payload\n}) => {\n  state.updateCartQuantity.error = payload;\n  state.updateCartQuantity.status = RequestStatus.Failed;\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    getCartRequest,\n    getCartSuccess,\n    getCartFailed,\n    addToCartRequest,\n    addToCartSuccess,\n    addToCartFailed,\n    removeFromCartRequest,\n    removeFromCartSuccess,\n    removeFromCartFailed,\n    updateCartQuantityRequest,\n    updateCartQuantitySuccess,\n    updateCartQuantityFailed\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/Ian/Desktop/ECPI CIS/CIS453/Week 1/Lab/CIS453 React Lab/main/source/src/store/slices/cart.ts"],"names":["createSlice","RequestStatus","initialState","list","fetching","data","addToCart","status","Idle","removeFromCart","updateCartQuantity","getCartRequest","state","error","getCartSuccess","payload","getCartFailed","addToCartRequest","Loading","addToCartSuccess","Success","addToCartFailed","Failed","removeFromCartRequest","removeFromCartSuccess","removeFromCartFailed","updateCartQuantityRequest","updateCartQuantitySuccess","updateCartQuantityFailed","cartSlice","name","reducers","cartActions","actions","cartReducer","reducer"],"mappings":"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","sourcesContent":["import { CaseReducer, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RequestStatus, ResponseState, ResponseStatus } from '@store/shared';\nimport { ProductItem } from '@store/slices/products';\n\nexport interface CartItem extends ProductItem {\n  cartQuantity: number;\n}\n\nexport interface AddToCartBody extends ProductItem {\n  cartQuantity: number;\n}\n\nexport interface UpdateCartQuantityBody {\n  id: number | string;\n  cartQuantity: number;\n}\n\ninterface CartState {\n  list: ResponseState<CartItem>;\n  addToCart: ResponseStatus;\n  removeFromCart: ResponseStatus;\n  updateCartQuantity: ResponseStatus;\n}\n\nconst initialState: CartState = {\n  list: { fetching: false, data: [] },\n  addToCart: { status: RequestStatus.Idle },\n  removeFromCart: { status: RequestStatus.Idle },\n  updateCartQuantity: { status: RequestStatus.Idle },\n};\n\nconst getCartRequest: CaseReducer<CartState> = (state) => {\n  delete state.list.error;\n  state.list.fetching = true;\n};\n\nconst getCartSuccess: CaseReducer<CartState, PayloadAction<ResponseState<CartItem>>> = (state, { payload }) => {\n  state.list.data = payload.data;\n  state.list.fetching = false;\n};\n\nconst getCartFailed: CaseReducer<CartState, PayloadAction<string>> = (state, { payload }) => {\n  state.list.error = payload;\n  state.list.fetching = false;\n};\n\nconst addToCartRequest: CaseReducer<CartState> = (state) => {\n  delete state.addToCart.error;\n  state.addToCart.status = RequestStatus.Loading;\n};\n\nconst addToCartSuccess: CaseReducer<CartState> = (state) => {\n  state.addToCart.status = RequestStatus.Success;\n};\n\nconst addToCartFailed: CaseReducer<CartState, PayloadAction<string>> = (state, { payload }) => {\n  state.addToCart.error = payload;\n  state.addToCart.status = RequestStatus.Failed;\n};\n\nconst removeFromCartRequest: CaseReducer<CartState> = (state) => {\n  delete state.removeFromCart.error;\n  state.removeFromCart.status = RequestStatus.Loading;\n};\n\nconst removeFromCartSuccess: CaseReducer<CartState> = (state) => {\n  state.removeFromCart.status = RequestStatus.Success;\n};\n\nconst removeFromCartFailed: CaseReducer<CartState, PayloadAction<string>> = (state, { payload }) => {\n  state.removeFromCart.error = payload;\n  state.removeFromCart.status = RequestStatus.Failed;\n};\n\nconst updateCartQuantityRequest: CaseReducer<CartState> = (state) => {\n  delete state.updateCartQuantity.error;\n  state.updateCartQuantity.status = RequestStatus.Loading;\n};\n\nconst updateCartQuantitySuccess: CaseReducer<CartState> = (state) => {\n  state.updateCartQuantity.status = RequestStatus.Success;\n};\n\nconst updateCartQuantityFailed: CaseReducer<CartState, PayloadAction<string>> = (state, { payload }) => {\n  state.updateCartQuantity.error = payload;\n  state.updateCartQuantity.status = RequestStatus.Failed;\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    getCartRequest,\n    getCartSuccess,\n    getCartFailed,\n\n    addToCartRequest,\n    addToCartSuccess,\n    addToCartFailed,\n\n    removeFromCartRequest,\n    removeFromCartSuccess,\n    removeFromCartFailed,\n\n    updateCartQuantityRequest,\n    updateCartQuantitySuccess,\n    updateCartQuantityFailed,\n  },\n});\n\nexport const cartActions = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}