{"ast":null,"code":"import axios from 'axios';\nimport isArray from 'lodash/isArray';\nvar ConnectionInstance = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_BASE_URL,\n  timeout: 10000\n});\nConnectionInstance.interceptors.request.use(function (requestConfig) {\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.info('API Request:', requestConfig);\n  }\n\n  return requestConfig;\n}, function (error) {\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.error('API Request Error:', error);\n  }\n\n  return Promise.reject(error);\n});\nConnectionInstance.interceptors.response.use(function (response) {\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.info('API Response:', response);\n  } //TODO: Fell free to remove this\n\n\n  if (isArray(response.data) && response.headers['x-total-count']) {\n    response.meta = {\n      total: Number(response.headers['x-total-count']),\n      page: response.config.params['_page'] || 1,\n      take: response.config.params['_limit'],\n      pageCount: response.config.params['_limit'] && Math.ceil(Number(response.headers['x-total-count']) / response.config.params['_limit'])\n    };\n  }\n\n  return response;\n}, function (error) {\n  var _error$response, _error$response$data;\n\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.error('API Response Error:', error);\n  }\n\n  var errorMessage = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message;\n\n  if (errorMessage) {\n    return Promise.reject(new Error(errorMessage));\n  }\n\n  return Promise.reject(error);\n});\nexport default ConnectionInstance;","map":{"version":3,"sources":["C:/Users/Ian/Desktop/ECPI CIS/CIS453/Week 1/Lab/CIS435 React Lab/main/source/src/services/connection-instance.ts"],"names":["axios","isArray","ConnectionInstance","create","baseURL","process","env","NEXT_PUBLIC_BASE_URL","timeout","interceptors","request","use","requestConfig","NEXT_PUBLIC_NODE_ENV","console","info","error","Promise","reject","response","data","headers","meta","total","Number","page","config","params","take","pageCount","Math","ceil","errorMessage","message","Error"],"mappings":"AACA,OAAOA,KAAP,MAAyD,OAAzD;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,IAAMC,kBAAkB,GAAGF,KAAK,CAACG,MAAN,CAAa;AACtCC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,oBADiB;AAEtCC,EAAAA,OAAO,EAAE;AAF6B,CAAb,CAA3B;AAKAN,kBAAkB,CAACO,YAAnB,CAAgCC,OAAhC,CAAwCC,GAAxC,CACE,UAACC,aAAD,EAAuC;AACrC,MAAIP,OAAO,CAACC,GAAR,CAAYO,oBAAZ,KAAqC,YAAzC,EAAuD;AACrDC,IAAAA,OAAO,CAACC,IAAR,CAAa,cAAb,EAA6BH,aAA7B;AACD;;AACD,SAAOA,aAAP;AACD,CANH,EAOE,UAAUI,KAAV,EAAiB;AACf,MAAIX,OAAO,CAACC,GAAR,CAAYO,oBAAZ,KAAqC,YAAzC,EAAuD;AACrDC,IAAAA,OAAO,CAACE,KAAR,CAAc,oBAAd,EAAoCA,KAApC;AACD;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAZH;AAeAd,kBAAkB,CAACO,YAAnB,CAAgCU,QAAhC,CAAyCR,GAAzC,CACE,UAACQ,QAAD,EAA6B;AAC3B,MAAId,OAAO,CAACC,GAAR,CAAYO,oBAAZ,KAAqC,YAAzC,EAAuD;AACrDC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAb,EAA8BI,QAA9B;AACD,GAH0B,CAK3B;;;AACA,MAAIlB,OAAO,CAACkB,QAAQ,CAACC,IAAV,CAAP,IAA0BD,QAAQ,CAACE,OAAT,CAAiB,eAAjB,CAA9B,EAAiE;AAC9DF,IAAAA,QAAD,CAAoDG,IAApD,GAA2D;AACzDC,MAAAA,KAAK,EAAEC,MAAM,CAACL,QAAQ,CAACE,OAAT,CAAiB,eAAjB,CAAD,CAD4C;AAEzDI,MAAAA,IAAI,EAAEN,QAAQ,CAACO,MAAT,CAAgBC,MAAhB,CAAuB,OAAvB,KAAmC,CAFgB;AAGzDC,MAAAA,IAAI,EAAET,QAAQ,CAACO,MAAT,CAAgBC,MAAhB,CAAuB,QAAvB,CAHmD;AAIzDE,MAAAA,SAAS,EACPV,QAAQ,CAACO,MAAT,CAAgBC,MAAhB,CAAuB,QAAvB,KACAG,IAAI,CAACC,IAAL,CAAUP,MAAM,CAACL,QAAQ,CAACE,OAAT,CAAiB,eAAjB,CAAD,CAAN,GAA4CF,QAAQ,CAACO,MAAT,CAAgBC,MAAhB,CAAuB,QAAvB,CAAtD;AANuD,KAA3D;AAQD;;AAED,SAAOR,QAAP;AACD,CAnBH,EAoBE,UAACH,KAAD,EAAW;AAAA;;AACT,MAAIX,OAAO,CAACC,GAAR,CAAYO,oBAAZ,KAAqC,YAAzC,EAAuD;AACrDC,IAAAA,OAAO,CAACE,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD;;AACD,MAAMgB,YAAY,GAAGhB,KAAH,aAAGA,KAAH,0CAAGA,KAAK,CAAEG,QAAV,4EAAG,gBAAiBC,IAApB,yDAAG,qBAAuBa,OAA5C;;AACA,MAAID,YAAJ,EAAkB;AAChB,WAAOf,OAAO,CAACC,MAAR,CAAe,IAAIgB,KAAJ,CAAUF,YAAV,CAAf,CAAP;AACD;;AACD,SAAOf,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CA7BH;AAgCA,eAAed,kBAAf","sourcesContent":["import { ResponeMeta } from '@store/shared';\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport isArray from 'lodash/isArray';\n\nconst ConnectionInstance = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_BASE_URL,\n  timeout: 10000,\n});\n\nConnectionInstance.interceptors.request.use(\n  (requestConfig: AxiosRequestConfig) => {\n    if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n      console.info('API Request:', requestConfig);\n    }\n    return requestConfig;\n  },\n  function (error) {\n    if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n      console.error('API Request Error:', error);\n    }\n    return Promise.reject(error);\n  },\n);\n\nConnectionInstance.interceptors.response.use(\n  (response: AxiosResponse) => {\n    if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n      console.info('API Response:', response);\n    }\n\n    //TODO: Fell free to remove this\n    if (isArray(response.data) && response.headers['x-total-count']) {\n      (response as AxiosResponse & { meta: ResponeMeta }).meta = {\n        total: Number(response.headers['x-total-count']),\n        page: response.config.params['_page'] || 1,\n        take: response.config.params['_limit'],\n        pageCount:\n          response.config.params['_limit'] &&\n          Math.ceil(Number(response.headers['x-total-count']) / response.config.params['_limit']),\n      };\n    }\n\n    return response;\n  },\n  (error) => {\n    if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n      console.error('API Response Error:', error);\n    }\n    const errorMessage = error?.response?.data?.message;\n    if (errorMessage) {\n      return Promise.reject(new Error(errorMessage));\n    }\n    return Promise.reject(error);\n  },\n);\n\nexport default ConnectionInstance;\n"]},"metadata":{},"sourceType":"module"}