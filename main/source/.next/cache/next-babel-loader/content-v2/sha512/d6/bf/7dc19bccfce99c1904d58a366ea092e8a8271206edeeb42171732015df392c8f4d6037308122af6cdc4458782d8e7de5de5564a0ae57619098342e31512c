{"ast":null,"code":"import axios from 'axios';\nimport isArray from 'lodash/isArray';\nconst ConnectionInstance = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_BASE_URL,\n  timeout: 10000\n});\nConnectionInstance.interceptors.request.use(requestConfig => {\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.info('API Request:', requestConfig);\n  }\n\n  return requestConfig;\n}, function (error) {\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.error('API Request Error:', error);\n  }\n\n  return Promise.reject(error);\n});\nConnectionInstance.interceptors.response.use(response => {\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.info('API Response:', response);\n  } //TODO: Fell free to remove this\n\n\n  if (isArray(response.data) && response.headers['x-total-count']) {\n    response.meta = {\n      total: Number(response.headers['x-total-count']),\n      page: response.config.params['_page'] || 1,\n      take: response.config.params['_limit'],\n      pageCount: response.config.params['_limit'] && Math.ceil(Number(response.headers['x-total-count']) / response.config.params['_limit'])\n    };\n  }\n\n  return response;\n}, error => {\n  var _error$response, _error$response$data;\n\n  if (process.env.NEXT_PUBLIC_NODE_ENV !== 'production') {\n    console.error('API Response Error:', error);\n  }\n\n  const errorMessage = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message;\n\n  if (errorMessage) {\n    return Promise.reject(new Error(errorMessage));\n  }\n\n  return Promise.reject(error);\n});\nexport default ConnectionInstance;","map":null,"metadata":{},"sourceType":"module"}